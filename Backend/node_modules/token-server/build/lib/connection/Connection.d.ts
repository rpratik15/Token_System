/// <reference types="node" />
import { EventEmitter } from 'events';
import { Duplex } from 'stream';
export interface Connection extends EventEmitter {
    /** The "token" event is emitted when a token is received from a socket. */
    on(event: 'token', handler: (token: Buffer) => void): this;
    /**
     * When TokenServer#close() is called it will send a close token to all clients.
     * The client will then emit the "remoteClose" event.
     * You need to call the Client#close() method in this event so the server can close.
     */
    on(event: 'remoteClose', handler: () => void): this;
    /** The close event of the underlying socket. */
    on(event: 'close', handler: () => void): this;
    /** The "token" event is emitted when a token is received from a socket. */
    once(event: 'token', handler: (token: Buffer) => void): this;
    /**
     * When TokenServer#close() is called it will send a close token to all clients.
     * The client will then emit the "remoteClose" event.
     * You need to call the Client#close() method in this event so the server can close.
     */
    once(event: 'remoteClose', handler: () => void): this;
    /** The close event of the underlying socket. */
    once(event: 'close', handler: () => void): this;
    emit(event: 'token', token: Buffer): boolean;
    emit(event: 'remoteClose'): boolean;
    emit(event: 'close'): boolean;
}
/**
 * Wrapper for streams that emits "token".
 */
export declare class Connection extends EventEmitter {
    socket: Duplex;
    private buffer;
    constructor(socket: Duplex);
    /**
     * Is true if the underlying socket is not writable.
     */
    readonly isDead: boolean;
    /**
     * Writes a message to the socket. Returns true if the message was written to the socket.
     * @param data The buffer to transmit.
     */
    send(data: Buffer): boolean;
    /**
     * Close the connection.
     */
    close(): boolean;
    /**
     * Close the other side of the connection.
     * Returns true if the close token was written to the socket.
     */
    remoteClose(): boolean;
    /**
     * Initially apply all events.
     */
    private applyEvents();
    /**
     * Parses and emits all tokens from the buffer.
     */
    private parse();
}
