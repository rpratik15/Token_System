"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Message_1 = require("./Message");
const CLOSE_TOKEN = Buffer.from('\\\n');
/**
 * Wrapper for streams that emits "token".
 */
class Connection extends events_1.EventEmitter {
    constructor(socket) {
        super();
        this.buffer = Buffer.allocUnsafe(0);
        this.socket = socket;
        this.applyEvents();
    }
    /**
     * Is true if the underlying socket is not writable.
     */
    get isDead() {
        return !this.socket.writable;
    }
    /**
     * Writes a message to the socket. Returns true if the message was written to the socket.
     * @param data The buffer to transmit.
     */
    send(data) {
        if (this.isDead) {
            return false;
        }
        this.socket.write(Message_1.Message.escape(data));
        return true;
    }
    /**
     * Close the connection.
     */
    close() {
        if (this.isDead) {
            return false;
        }
        this.socket.end();
        return true;
    }
    /**
     * Close the other side of the connection.
     * Returns true if the close token was written to the socket.
     */
    remoteClose() {
        if (this.isDead) {
            return false;
        }
        this.socket.write(CLOSE_TOKEN);
        return true;
    }
    /**
     * Initially apply all events.
     */
    applyEvents() {
        this.socket.on('data', (data) => {
            this.buffer = Buffer.concat([this.buffer, data]);
            this.parse();
        });
        // Bubble up close event.
        this.socket.on('close', () => this.emit('close'));
    }
    /**
     * Parses and emits all tokens from the buffer.
     */
    parse() {
        while (true) {
            const i = this.buffer.indexOf(Message_1.NEWLINE);
            if (i === -1) {
                break;
            }
            // +1 to include the separating newline
            const data = this.buffer.slice(0, i + 1);
            if (data.equals(CLOSE_TOKEN)) {
                this.emit('remoteClose');
            }
            else {
                this.emit('token', Message_1.Message.unescape(data));
            }
            this.buffer = this.buffer.slice(i + 1);
        }
    }
}
exports.Connection = Connection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29ubmVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29ubmVjdGlvbi9Db25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBRXJDLHVDQUE0QztBQUU1QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBaUN2Qzs7R0FFRztBQUNILGdCQUF3QixTQUFRLHFCQUFZO0lBSTNDLFlBQVksTUFBYztRQUN6QixLQUFLLEVBQUUsQ0FBQTtRQUhBLFdBQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBSXJDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLE1BQU07UUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFBO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxJQUFJLENBQUMsSUFBWTtRQUN2QixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUE7U0FDWjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkMsT0FBTyxJQUFJLENBQUE7SUFDWixDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLO1FBQ1gsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sS0FBSyxDQUFBO1NBQ1o7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2pCLE9BQU8sSUFBSSxDQUFBO0lBQ1osQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVc7UUFDakIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sS0FBSyxDQUFBO1NBQ1o7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUM5QixPQUFPLElBQUksQ0FBQTtJQUNaLENBQUM7SUFFRDs7T0FFRztJQUNLLFdBQVc7UUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBRWhELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNiLENBQUMsQ0FBQyxDQUFBO1FBRUYseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ssS0FBSztRQUNaLE9BQU8sSUFBSSxFQUFFO1lBQ1osTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQU8sQ0FBQyxDQUFBO1lBRXRDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNiLE1BQUs7YUFDTDtZQUVELHVDQUF1QztZQUN2QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBRXhDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTthQUN4QjtpQkFBTTtnQkFDTixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2FBQzFDO1lBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDdEM7SUFDRixDQUFDO0NBQ0Q7QUE1RkQsZ0NBNEZDIn0=