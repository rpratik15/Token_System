"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NEWLINE = Buffer.from('\n')[0];
const ESC = Buffer.from('\\')[0];
const ESC_N = Buffer.from('n')[0];
class Message {
    /**
     * Escapes all newlines and backslashes in a buffer.
     * @param data The buffer that needs to be escaped.
     */
    static escape(data) {
        const result = [];
        for (const char of data) {
            switch (char) {
                case ESC:
                    // Escape escaped backslash.
                    result.push(ESC);
                    result.push(ESC);
                    break;
                case exports.NEWLINE:
                    // Escape newline.
                    result.push(ESC);
                    result.push(ESC_N);
                    break;
                default:
                    // Copy char.
                    result.push(char);
                    break;
            }
        }
        result.push(exports.NEWLINE);
        return Buffer.from(result);
    }
    /**
     * Reverts all changes of the escape method.
     * @param data Data that needs to be unescaped.
     */
    static unescape(data) {
        const result = [];
        // Ignore last byte because it's the separating newline.
        for (let i = 0; i < data.length - 1; i++) {
            const char = data[i];
            const next = data[i + 1];
            if (char === ESC) {
                switch (next) {
                    case ESC:
                        // Escaped escaped backslash.
                        result.push(ESC);
                        i += 1;
                        break;
                    case ESC_N:
                        // Escaped newline.
                        result.push(exports.NEWLINE);
                        i += 1;
                        break;
                    default:
                        throw new Error('Unescaped backslash detected!');
                }
            }
            else {
                // Normal char.
                result.push(char);
            }
        }
        return Buffer.from(result);
    }
}
exports.Message = Message;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29ubmVjdGlvbi9NZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQWEsUUFBQSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMzQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFFakM7SUFDQzs7O09BR0c7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQVk7UUFDaEMsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFBO1FBRTNCLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ3hCLFFBQVEsSUFBSSxFQUFFO2dCQUNiLEtBQUssR0FBRztvQkFDUCw0QkFBNEI7b0JBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7b0JBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7b0JBQ2hCLE1BQUs7Z0JBQ04sS0FBSyxlQUFPO29CQUNYLGtCQUFrQjtvQkFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtvQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDbEIsTUFBSztnQkFDTjtvQkFDQyxhQUFhO29CQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7b0JBQ2pCLE1BQUs7YUFDTjtTQUNEO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFPLENBQUMsQ0FBQTtRQUVwQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBWTtRQUNsQyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUE7UUFFM0Isd0RBQXdEO1FBQ3hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDcEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUV4QixJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7Z0JBQ2pCLFFBQVEsSUFBSSxFQUFFO29CQUNiLEtBQUssR0FBRzt3QkFDUCw2QkFBNkI7d0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7d0JBQ2hCLENBQUMsSUFBSSxDQUFDLENBQUE7d0JBQ04sTUFBSztvQkFDTixLQUFLLEtBQUs7d0JBQ1QsbUJBQW1CO3dCQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQU8sQ0FBQyxDQUFBO3dCQUNwQixDQUFDLElBQUksQ0FBQyxDQUFBO3dCQUNOLE1BQUs7b0JBQ047d0JBQ0MsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO2lCQUNqRDthQUNEO2lCQUFNO2dCQUNOLGVBQWU7Z0JBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUNqQjtTQUNEO1FBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzNCLENBQUM7Q0FDRDtBQW5FRCwwQkFtRUMifQ==