/// <reference types="node" />
import * as net from 'net';
import * as tls from 'tls';
import { Connection } from '../connection/Connection';
import { TokenAPI } from './TokenAPI';
export declare type TokenClientOptions = tls.ConnectionOptions & net.SocketConstructorOpts;
export interface TokenClient extends TokenAPI {
    /**
     * When TokenServer#close() is called it will send a close token to all clients.
     * The client will then emit the "remoteClose" event.
     * You need to call the Client#close() method in this event so the server can close.
     */
    on(event: 'remoteClose', listener: (connection: Connection) => void): this;
    on(event: string, listener: (...args: any[]) => void): this;
    /**
     * When TokenServer#close() is called it will send a close token to all clients.
     * The client will then emit the "remoteClose" event.
     * You need to call the Client#close() method in this event so the server can close.
     */
    once(event: 'remoteClose', listener: (connection: Connection) => void): this;
    once(event: string, listener: (...args: any[]) => void): this;
    emit(event: 'remoteClose', connection: Connection): boolean;
    emit(event: string, ...args: any[]): boolean;
}
export declare class TokenClient extends TokenAPI {
    private options;
    private socket;
    private connection;
    private hadError;
    constructor(options: TokenClientOptions);
    close(): boolean;
    connect(): boolean;
    /**
     * Send a token to the server.
     * Returns true if the token was written to the connection.
     * @param token The token to transmit to the server.
     */
    send(token: Buffer): boolean;
    /**
     * Applies initial event listeners.
     */
    private applyListeners();
    /**
     * Creates a new connection object for the socket.
     */
    private updateConnection();
}
