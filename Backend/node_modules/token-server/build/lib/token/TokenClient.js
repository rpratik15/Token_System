"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tls = require("tls");
const Connection_1 = require("../connection/Connection");
const Status_1 = require("./Status");
const TokenAPI_1 = require("./TokenAPI");
class TokenClient extends TokenAPI_1.TokenAPI {
    constructor(options) {
        super();
        this.connection = null;
        this.options = options;
        this.connect();
    }
    close() {
        if (this.status <= Status_1.Status.CLOSED) {
            // Already closed or offline.
            return false;
        }
        this.status = Status_1.Status.CLOSED;
        this.socket.end();
        this.connection = null;
        return true;
    }
    connect() {
        if (this.status >= Status_1.Status.CONNECTING) {
            // Still connected.
            return false;
        }
        this.hadError = false;
        this.status = Status_1.Status.CONNECTING;
        this.socket = tls.connect(this.options);
        this.connection = null;
        this.applyListeners();
        return true;
    }
    /**
     * Send a token to the server.
     * Returns true if the token was written to the connection.
     * @param token The token to transmit to the server.
     */
    send(token) {
        if (this.connection) {
            return this.connection.send(token);
        }
        return false;
    }
    /**
     * Applies initial event listeners.
     */
    applyListeners() {
        this.socket.on('error', (error) => {
            this.hadError = true;
            // Emit socket errors.
            this.emit('error', error);
        });
        this.socket.on('close', () => {
            this.status = Status_1.Status.OFFLINE;
            // Emit own close event.
            this.emit('close', this.hadError);
        });
        this.socket.on('secureConnect', () => {
            this.updateConnection();
            // The socket is now connected.
            this.status = Status_1.Status.ONLINE;
            this.emit('connect');
        });
    }
    /**
     * Creates a new connection object for the socket.
     */
    updateConnection() {
        const connection = new Connection_1.Connection(this.socket);
        connection.on('token', (token) => {
            // Emit token
            this.emit('token', token, connection);
        });
        connection.on('remoteClose', () => {
            this.emit('remoteClose', connection);
        });
        this.connection = connection;
    }
}
exports.TokenClient = TokenClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Rva2VuL1Rva2VuQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkJBQTBCO0FBRTFCLHlEQUFxRDtBQUNyRCxxQ0FBaUM7QUFDakMseUNBQXFDO0FBeUJyQyxpQkFBeUIsU0FBUSxtQkFBUTtJQU14QyxZQUFZLE9BQTJCO1FBQ3RDLEtBQUssRUFBRSxDQUFBO1FBSkEsZUFBVSxHQUFzQixJQUFJLENBQUE7UUFNM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFFdEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2YsQ0FBQztJQUVNLEtBQUs7UUFDWCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksZUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQyw2QkFBNkI7WUFDN0IsT0FBTyxLQUFLLENBQUE7U0FDWjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBTSxDQUFDLE1BQU0sQ0FBQTtRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFBO1FBQ3RCLE9BQU8sSUFBSSxDQUFBO0lBQ1osQ0FBQztJQUVNLE9BQU87UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksZUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNyQyxtQkFBbUI7WUFDbkIsT0FBTyxLQUFLLENBQUE7U0FDWjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBTSxDQUFDLFVBQVUsQ0FBQTtRQUUvQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFBO1FBRXRCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUVyQixPQUFPLElBQUksQ0FBQTtJQUNaLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksSUFBSSxDQUFDLEtBQWE7UUFDeEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDbEM7UUFDRCxPQUFPLEtBQUssQ0FBQTtJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNLLGNBQWM7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7WUFFcEIsc0JBQXNCO1lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzFCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLGVBQU0sQ0FBQyxPQUFPLENBQUE7WUFFNUIsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNsQyxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFDcEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUE7WUFFdkIsK0JBQStCO1lBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBTSxDQUFDLE1BQU0sQ0FBQTtZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3JCLENBQUMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ssZ0JBQWdCO1FBQ3ZCLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFOUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoQyxhQUFhO1lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQyxDQUFBO1FBRUYsVUFBVSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3JDLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7SUFDN0IsQ0FBQztDQUNEO0FBbkdELGtDQW1HQyJ9