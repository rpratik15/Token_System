"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tls = require("tls");
const Connection_1 = require("../connection/Connection");
const Status_1 = require("./Status");
const TokenAPI_1 = require("./TokenAPI");
class TokenServer extends TokenAPI_1.TokenAPI {
    constructor(options) {
        super();
        /** Contains all active connections */
        this.connections = [];
        this.options = options;
        this.server = tls.createServer(this.options);
        this.applyListeners();
        this.connect();
    }
    close() {
        if (!this.server.listening) {
            // Server already closed.
            return false;
        }
        this.status = Status_1.Status.CLOSED;
        this.server.close();
        for (const connection of this.connections) {
            connection.remoteClose();
        }
        return true;
    }
    connect() {
        if (this.status >= Status_1.Status.CONNECTING) {
            // Server already connecting or online.
            return false;
        }
        this.hadError = false;
        this.status = Status_1.Status.CONNECTING;
        this.server.listen(this.options);
        return true;
    }
    applyListeners() {
        this.server.on('listening', () => {
            this.status = Status_1.Status.ONLINE;
            this.emit('connect');
        });
        this.server.on('error', (error) => {
            // Set status to failed so we know that it was closed by an error.
            this.hadError = true;
            // Emit server errors.
            this.emit('error', error);
            // Call close so the server emits the "close" event.
            this.server.close();
        });
        this.server.on('close', () => {
            this.status = Status_1.Status.OFFLINE;
            // Emit the close event.
            this.emit('close', this.hadError);
        });
        this.server.on('secureConnection', (socket) => {
            const connection = new Connection_1.Connection(socket);
            this.connections.push(connection);
            connection.once('close', () => {
                const i = this.connections.indexOf(connection);
                this.connections.splice(i, 1);
            });
            connection.on('token', (token) => {
                this.emit('token', token, connection);
            });
        });
    }
}
exports.TokenServer = TokenServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5TZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Rva2VuL1Rva2VuU2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkJBQTBCO0FBRTFCLHlEQUFxRDtBQUNyRCxxQ0FBaUM7QUFDakMseUNBQXFDO0FBSXJDLGlCQUF5QixTQUFRLG1CQUFRO0lBUXhDLFlBQVksT0FBMkI7UUFDdEMsS0FBSyxFQUFFLENBQUE7UUFSUixzQ0FBc0M7UUFDL0IsZ0JBQVcsR0FBaUIsRUFBRSxDQUFBO1FBU3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBRXRCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDNUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNmLENBQUM7SUFFTSxLQUFLO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQzNCLHlCQUF5QjtZQUN6QixPQUFPLEtBQUssQ0FBQTtTQUNaO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFNLENBQUMsTUFBTSxDQUFBO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFbkIsS0FBSyxNQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtTQUN4QjtRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ1osQ0FBQztJQUVNLE9BQU87UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksZUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNyQyx1Q0FBdUM7WUFDdkMsT0FBTyxLQUFLLENBQUE7U0FDWjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBTSxDQUFDLFVBQVUsQ0FBQTtRQUUvQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFaEMsT0FBTyxJQUFJLENBQUE7SUFDWixDQUFDO0lBRU8sY0FBYztRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBTSxDQUFDLE1BQU0sQ0FBQTtZQUUzQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3JCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDeEMsa0VBQWtFO1lBQ2xFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1lBRXBCLHNCQUFzQjtZQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUV6QixvREFBb0Q7WUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNwQixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFNLENBQUMsT0FBTyxDQUFBO1lBRTVCLHdCQUF3QjtZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDbEMsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzdDLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUV6QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUVqQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQzdCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDOUIsQ0FBQyxDQUFDLENBQUE7WUFFRixVQUFVLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUE7WUFDdEMsQ0FBQyxDQUFDLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FDRDtBQXhGRCxrQ0F3RkMifQ==